<?php

/**
 * @file
 * Adds the required Javascript to the checkout completion page to allow
 * e-commerce statistics tracking through Google Analytics.
 * 
 * Refer to http://code.google.com/apis/analytics/docs/gaTrackingEcommerce.html
 * for documentation on the functions used to submit e-commerce statistics to
 * Google Analytics.
 */



/**
 * Implementation of hook_enable().
 */
function commerce_google_analytics_enable() {
  $weight = db_query("SELECT weight FROM {system} WHERE name = :module", array(':module' => 'googleanalytics'))->fetchField();

  // Update the weight of the UC Google Analytics module so its hooks get called
  // after the actual Google Analytics module.
  db_update('system')
    ->fields(array('weight' => max(1000, $weight + 1)))
    ->condition('name', 'commerce_google_analytics')
    ->execute();
}


/**
 * Implements hook_commerce_checkout_router()
 *
 */
function commerce_google_analytics_commerce_checkout_router($order, $checkout_page) {

  // Add the javascript only when we are on the order complete page
  if ($checkout_page['page_id'] == 'complete') {
    $script = commerce_google_analytics_ecommerce_js($order);
    
    // Add the code to the footer.
    drupal_add_js($script, array('type' => 'inline', 'scope' => 'footer', 'preprocess' => FALSE));
  }
  
}


/**
 * Build the e-commerce JS passed to Google Analytics for order tracking.
 *
 * @param $order
 *   The fully loaded order object to convert into GA JS.
 * @return
 *   The JS that should be added to the page footer.
 */
function commerce_google_analytics_ecommerce_js($order) {
  $script = '';
  
	if(!($order instanceof EntityMetadataWrapper)) {
		$order = entity_metadata_wrapper('commerce_order', $order);
	}

  
  $tax_sum = 0;
  if (module_exists('commerce_tax')) {
    foreach (commerce_tax_rates() as $name => $tax_rate) {
      if ($tax_rate['price_component']) {
        $tax_component = commerce_price_component_load($order->commerce_order_total->value(), $tax_rate['price_component']);
        $tax_sum += commerce_currency_amount_to_decimal($tax_component[0]['price']['amount'], $tax_component[0]['price']['currency_code']);  
      }
    }
  }
  
  $shipping = 0;
  if (module_exists('commerce_shipping')) {
    foreach ($order->commerce_line_items as $item) {
      if ($item->type->value() == 'shipping') {
        $shipping += commerce_currency_amount_to_decimal($item->commerce_total->amount->value(), $item->commerce_total->currency_code->value());
      }
   }

  }
  
  $profile = commerce_customer_profile_load($order->commerce_customer_billing->profile_id->value());
  $address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
  
  // Build the transaction arguments.
  $transaction = array(
    'order_id' => $order->order_id->value(),
    'store' => variable_get('site_name', 'Ubercart'),
    'total' => commerce_currency_amount_to_decimal($order->commerce_order_total->amount->value(), $order->commerce_order_total->currency_code->value()),
    'tax' => $tax_sum,
    'shipping' => $shipping,
    'city' => $address['locality'],
    'state' => '',
    'country' => $address['country'],
  );
  
  // Allow modules to alter the transaction arguments.
  drupal_alter('commerce_google_analytics_transaction', $transaction, $order);
  
  
  // Put the arguments into an array that is safe to implode directly.
  $args = array(
    '"' . $transaction['order_id'] . '"',
    drupal_json_encode($transaction['store']),
    '"' . $transaction['total'] . '"',
    '"' . $transaction['tax'] . '"',
    '"' . $transaction['shipping'] . '"',
    drupal_json_encode($transaction['city']),
    drupal_json_encode($transaction['state']),
    drupal_json_encode($transaction['country']),
  );

  // Add the transaction line to the JS.
  $script .= '_gaq.push(["_addTrans", '. implode(', ', $args) .']);';

  // Loop through the products on the order.
  foreach ($order->commerce_line_items as $line_item) {
    $category = '';

    // TODO: Add find a category for the line item
    if (empty($category)) {
      $category = t('No category');
    }
    
    $properties = $line_item->getPropertyInfo();
    if (isset($properties['commerce_product'])) {
      // Build the item arguments.
      $item = array(
        'order_id' => $order->order_id->value(),
        'sku' => $line_item->commerce_product->sku->value(),
        'name' => $line_item->commerce_product->title->value(),
        'category' => $category,
        'price' => commerce_currency_amount_to_decimal($line_item->commerce_unit_price->amount->value(), $line_item->commerce_unit_price->currency_code->value()),
        'qty' => $line_item->quantity->value(),
      );
    }
    else {
      $item = array(
        'order_id' => $order->order_id->value(),
        'sku' => $line_item->type->value(),
        'name' => $line_item->line_item_label->value(),
        'category' => $category,
        'price' => commerce_currency_amount_to_decimal($line_item->commerce_unit_price->amount->value(), $line_item->commerce_unit_price->currency_code->value()),
        'qty' => $line_item->quantity->value(),
      );    
    }
    

    // Allow modules to alter the item arguments.
    drupal_alter('commerce_google_analytics_item', $item, $line_item, $transaction, $order);

    // Put the arguments into an array that is safe to implode directly.
    $args = array(
      '"' . $item['order_id'] . '"',
      drupal_json_encode($item['sku']),
      drupal_json_encode($item['name']),
      drupal_json_encode((string) $item['category']),
      '"' . $item['price'] . '"',
      '"' . $item['qty'] . '"',
    );

    // Add the item line to the JS.
    $script .= '_gaq.push(["_addItem", '. implode(', ', $args) .']);';
  }

  // Add the function to submit the transaction to GA.
  $script .= '_gaq.push(["_trackTrans"]);';

  return $script;
}
